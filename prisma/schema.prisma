generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String                 @id @default(cuid())
  name                   String?
  email                  String                 @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  lastActive             DateTime?              @default(now())
  accounts               Account[]
  bugs                   Bug[]
  dailyLogs              DailyLog[]
  friendsAsUser1         Friend[]               @relation("UserFriends")
  friendsAsUser2         Friend[]               @relation("FriendUsers")
  receivedFriendRequests FriendRequest[]        @relation("ReceivedFriendRequests")
  sentFriendRequests     FriendRequest[]        @relation("SentFriendRequests")
  notificationSettings   NotificationSettings?
  quranSettings          QuranReviewSettings?
  sessions               Session[]
  spacedRepetition       SpacedRepetitionData[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuranReviewSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  selectedJuzaa     Int[]
  selectedSurahs    Int[]
  selectionType     String   @default("juzaa")
  ayahsAfter        Int      @default(2)
  promptsPerSession Int      @default(20)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpacedRepetitionData {
  id            String   @id @default(cuid())
  userId        String
  surahNo       Int
  ayahNoSurah   Int
  interval      Float    @default(1)
  repetitions   Int      @default(0)
  easeFactor    Float    @default(2.5)
  lastReviewed  DateTime @default(now())
  dueDate       DateTime @default(now())
  reviewDate    String?
  selectionType String   @default("juzaa")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, surahNo, ayahNoSurah])
  @@index([userId, dueDate])
}

model DailyLog {
  id        String   @id @default(cuid())
  userId    String
  date      String
  ayahKey   String
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, ayahKey])
  @@index([userId, date])
}

model Bug {
  id           String   @id @default(cuid())
  userId       String
  description  String
  ticketNumber String   @unique
  status       String   @default("open")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Friend {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  user1     User     @relation("UserFriends", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("FriendUsers", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model NotificationSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  optedIn             Boolean  @default(true)
  dailyReminders      Boolean  @default(true)
  weeklyReminders     Boolean  @default(true)
  streakReminders     Boolean  @default(true)
  pushNotifications   Boolean  @default(true)
  fcmToken            String?
  fcmTokenCreatedAt   DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
